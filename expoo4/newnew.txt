import React, { useState, useEffect } from 'react';
import {
  StyleSheet,
  Text,
  View,
  TouchableOpacity,
  ActivityIndicator,
  SafeAreaView,
  Image,
  FlatList,
} from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { FontAwesome } from '@expo/vector-icons';

const App = () => {
  const apiUrl = 'https://dummyjson.com/products';

  const [data, setData] = useState(null);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const [selectedIndex, setSelectedIndex] = useState(0);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = () => {
    setLoading(true);
    setError('');

    fetch(apiUrl + '?limit=4', { method: 'GET' })
      .then((response) => {
        if (!response.ok) throw new Error('Network response was not ok');
        return response.json();
      })
      .then((responseData) => setData(responseData.products))
      .catch((err) => {
        setError('Error fetching data. Please try again.');
        console.error('Error fetching data:', err);
      })
      .finally(() => setLoading(false));
  };

  const ProductCard = ({ product, index }) => {
    const isSelected = index === selectedIndex;

    return (
      <View style={[styles.card]}>
        <View style={styles.cardHeader}>
        <Image source={{ uri: product.images[0] }} style={styles.thumbnail} />
        <Text style={styles.itemTitle}>{product.title}</Text>
        </View>
        <Text style={styles.json}>Description: {product.description}</Text>
        <Text style={styles.json}>Price: ${product.price}</Text>
        <Text style={styles.json}>Discount Percentage: {product.discountPercentage}%</Text>
        <Text style={styles.json}>Rating: {product.rating}</Text>
        <Text style={styles.json}>Stock: {product.stock}</Text>
        <Text style={styles.json}>Brand: {product.brand}</Text>
        <Text style={styles.json}>Category: {product.category}</Text>
      </View>
    );
  };

  const resetData = () => {
    setData(null);
    setError('');
    setLoading(false);
  };
  
  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.buttonContainer}>
        <TouchableOpacity onPress={fetchData} style={styles.button}>
          <FontAwesome name="refresh" size={20} color="white" />
        </TouchableOpacity>
        {loading && <ActivityIndicator size="small" color="orange" />}
        <TouchableOpacity onPress={resetData} style={styles.button}>
          <FontAwesome name="home" size={20} color="white" />
        </TouchableOpacity>
      </View>
      {data && (
        <FlatList
          data={data}
          keyExtractor={(item) => item.id.toString()}
          pagingEnabled
          renderItem={({ item, index }) => (
            <ProductCard key={index} product={item} index={index} />
          )}
        />
      )}
      {error && <Text style={styles.errorText}>{error}</Text>}
      <StatusBar backgroundColor="orange" />
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    paddingTop: 20,
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginTop: 20,
    marginBottom: 10,
  },
  button: {
    width: '35%',
    height: 40,
    backgroundColor: 'orange',
    borderRadius: 25,
    alignItems: 'center',
    justifyContent: 'center',
  },
  card: {
    borderWidth: 3,
    borderColor: 'orange',
    borderRadius: 10,
    padding: 20,
    marginHorizontal: 10,
    marginBottom: 10,
    backgroundColor: 'white',

  },

  cardHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 10,
    
  },
  itemTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginLeft: 10,
    flex: 1,
  },
  errorText: {
    marginTop: 20,
    fontSize: 16,
    color: 'red',
    textAlign: 'center',
  },
  json: {
    textAlign: 'left',
    marginTop: 5,
  },
  thumbnail: {
    width: 100,
    height: 100,
    marginRight: 10,
  },
});

export default App;
